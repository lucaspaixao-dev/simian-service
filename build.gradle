buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'kotlin'
apply plugin: 'application'

group 'com.github.lucasschwenke'
version '1.0.0'
mainClassName = "io.ktor.server.netty.EngineMain"

sourceSets {
    main.kotlin.srcDirs = main.java.srcDirs = ['src']
    test.kotlin.srcDirs = test.java.srcDirs = ['test']
    main.resources.srcDirs = ['resources']
    test.resources.srcDirs = ['testresources']
}

repositories {
    mavenLocal()
    jcenter()
    maven { url 'https://kotlin.bintray.com/ktor' }
}

dependencies {
    //ktor
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "io.ktor:ktor-server-netty:$ktor_version"
    implementation "ch.qos.logback:logback-classic:$logback_version"
    implementation "io.ktor:ktor-server-core:$ktor_version"
    implementation "io.ktor:ktor-jackson:$ktor_version"

    //koin
    compile "org.koin:koin-ktor:$koin_version"

    //db
    compile "org.mongodb:mongo-java-driver:$mongo_version"

    //utils
    compile "io.azam.ulidj:ulidj:$ulid_version"

    //tests
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_5_version"
    testImplementation "io.ktor:ktor-server-tests:$ktor_version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_5_version"
    testCompile "io.mockk:mockk:$mockk_version"
    testCompile "org.assertj:assertj-core:$assertions_version"
    testCompile "de.bwaldvogel:mongo-java-server:$mongo_db_test_version"
    testCompile "org.skyscreamer:jsonassert:$json_assert_version"

}

test {
    useJUnitPlatform()

    filter {
        includeTestsMatching "com.github.lucasschwenke.com.github.lucasschwenke.simian.*"
    }

    testLogging {
        exceptionFormat = 'full'
        outputs.upToDateWhen { false }
        showStandardStreams = true
        events "PASSED", "FAILED", "SKIPPED"
    }
}

task componentTest(type: Test) {
    useJUnitPlatform()
    failFast = true

    environment "MONGO_HOST", "TEST"
    environment "MONGO_AUTH_USER", "TEST"
    environment "MONGO_DATABASE", "TEST"
    environment "MONGO_AUTH_PASSWORD", 1234

    filter {
        includeTestsMatching "componentTests.*"
    }

    testLogging {
        exceptionFormat = 'full'
        outputs.upToDateWhen { false }
        showStandardStreams = true
        events "PASSED", "FAILED", "SKIPPED"
    }

    mustRunAfter test
}

test.finalizedBy componentTest
